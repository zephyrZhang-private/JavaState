package personal.thread1;

/*
程序：一段可以运行的代码
进程：正在运行的程序,占用了一定内存空间,在使用系统的各种资源
线程：进程中最小执行单元

注意：一个进程至少有一个线程,当所有线程都关闭时,进程结束
    - 当只有一个线程时,这个线程被称为主线程 -- main
    - 当一个进程中有多个线程同时存在,成为多线程
    - 在一些相关资料中,线程也叫微型的进程

线程与进程
  - 相同点
    - 为了处理多个任务并发而存在
  - 不同点
    - 进程之间的资源是不共享的,一个进程不能访问另一个进程的数据
    - 线程之间的资源是共享的,多个线程共享同一个数据
    - 因为线程之间资源共享,所以会有临界资源问题 -- 线程安全问题

多线程的作用：为了在同一时间处理多个任务，并发执行

注意：
  - 多线程的并发指的是宏观意义上同一时间执行多个任务
  - 多线程之间肯定是抢cpu,永远不要控制cpu行为
  - cpu可分为多个时间片去分配给各个线程工作 -- 一个时间片大概就几十毫秒

 */

public class Demo1 {
//  单线程,主线程
    public static void main(String[] args) {
        System.out.println("hello");
    }
}


/*
线程的生命周期
 - 新生态 没有抢CPU时间片的能力
 - 就绪态 就绪态 -> 运行态 -> 阻塞态 -> 就绪态  不能反向
 - 运行态 执行任务,时间片用完或者yield方法让出时间片
 - 阻塞态 失去抢CPU时间片能力,等待用户写入 线程休眠 合并线程join
 - 阻塞态等待队列 wait方法,失去抢CPU时间片能力和锁
 - 阻塞态锁池 具有抢CPU时间片能力,进入锁池,获取锁标记后可为就绪态
 - 死亡态 线程任务区执行结束或者线程异常退出
 */